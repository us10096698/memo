[
  {
    "title": "git: aliases",
    "doc": "",
    "code": "[alias]\n  alias = config --get-regexp \\\"alias.*\\\"\n  ci = commit\n  st = status\n  br = branch\n  co = checkout \n  ls = ls-files\n  undo = reset --hard\n  history = log --date=short --pretty=format:'%cd %C(yellow)%h %C(white) %s %C(green)@%cn' \n  graph = log --graph --date=short --decorate=short --pretty=format:'%Cgreen%h %Creset%cd %Cblue%cn %Cred%d %Creset%s'"
  },
  {
    "title": "angular: watch specific element and fire events",
    "doc": "`MutationObserver` will help it\n+ [link](https://developer.mozilla.org/ja/docs/Web/API/MutationObserver)",
    "code": "var blocker = angular.element('#observedElement')[0];\nvar observer = new MutationObserver(function(mutations) {\n  onChanged();\n});\nvar observerOpt = {characterData: true, childList: true, subtree: true};\n\nobserver.observe(blocker, observerOpt);\n\nfunction onChanged() {\n  observer.disconnect(); // If necessary\n  // do something\n  observer.observe(blocker, observerOpt); // If necessary\n}"
  },
  {
    "title": "Angular: Testing strategy",
    "doc": "+ Contoller\n  - serviceはmock化する。\n\n+ [reference](https://gist.github.com/blesh/8846528)",
    "code": ""
  },
  {
    "title": "Protractor: Disable animations",
    "doc": "",
    "code": "// css\n.notransition * {\n  -webkit-transition: none !important;\n  -moz-transition: none !important;\n  -o-transition: none !important;\n  -ms-transition: none !important;\n  transition: none !important;\n}\n\n// js (protractor)\nfunction disableAnimation() {\n  element(by.css('body')).allowAnimations(false);\n  browser.executeScript(\"document.body.className += ' notransition';\");\n}"
  },
  {
    "title": "Protractor: drag and drop",
    "doc": "You can simply use `browser.actions()` function to to that.\nhttp://stackoverflow.com/questions/24315571/drag-drop-with-protractor-by-repeater",
    "code": "var startPoint = $('.start');\nvar dropPoint = $('.end');\n\nbrowser.actions().\n  mouseMove(startPoint).\n  mouseDown().\n  mouseMove(dropPoint).\n  mouseUp().\n  perform();"
  },
  {
    "title": "Protractor: toBe and toEqual",
    "doc": "+ for primitive types(5, true, \"aaa\", ...), there is no difference\n+ `toBe` is equal to `===` \n  - exactly the same (same location of memory)\n+ `toEqual` is  equal to `==`\n  - does a recursive search through the objects to determine whether the values for their keys are equivalent",
    "code": "var a = { bar: 'baz' };\nvar b = {foo:  a};\nvar c = {foo: a};\n\nexpect(b.foo).toBe(c.foo) // ng\nexpect(b.foo).toEqual(c.foo) // ok"
  },
  {
    "title": "Protractor: coding style",
    "doc": "+ get an element: `$('css-selector')`\n+ get elements: `$$('css-selector')`\n+ assertion\n  - primitive types: `toBe`\n  - objects: `toEqual`",
    "code": ""
  },
  {
    "title": "Bootstrap: Sidebar",
    "doc": "+ [link](http://junonet.biz/web-design/css%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%89%E3%81%A8%E3%83%A1%E3%82%A4%E3%83%B3%E3%81%AE%E9%AB%98%E3%81%95%E3%82%92%E6%8F%83%E3%81%88%E3%82%8B%E6%96%B9%E6%B3%95/)",
    "code": "--- html\n\n<div class=\"container-fluid\" id=\"contents\">\n  <div class=\"sidebar col-md-2\"> ... </>\n  <div class=\"main col-md-10\"> ... </>\n</div>\n\n--- css\n\n#contents {\n  overflow: hidden;\n}\n\n.sidebar {\n  padding-bottom: 10000px;\n  margin-bottom: -10000px;\n}"
  },
  {
    "title": "js: 三項演算子",
    "doc": "+ 変数 = 評価式 ? trueの場合 : falseの場合\n+ デフォルト値を持たせるバリエーション\n  - 変数 = 指定値 || 指定されていない場合のデフォルト値",
    "code": "var hoge = config.isEnabled() ? huga : 'default';\nvar hoge = process.env.HOST || 'localhost';"
  },
  {
    "title": "node: http request",
    "doc": "+ reference: https://nodejs.org/api/http.html",
    "code": "var http = require('http');\n\nvar data = {message: 'hello'};\n \nvar options = {\n  host: 'api.example.com',\n  path: '/api/hello',\n  method: POST,\n  headers: {\n    'Authorization': 'bearer XXXX',\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Content-Length': data.length\n  }\n}\n\nvar resdata = '';\nvar req = http.request(options, function(res) {\n  res.setEncoding('utf8');\n  res.on('data', function (chunk) {\n    resdata += chunk;\n  });\n\n  res.on('end', function() {\n    res.status(200).json(JSON.parse(resdata));\n  });\n});\n\nreq.on('error', function(e) {\n  console.log(e.message);\n  process.exit();\n});\n\nreq.write(data)\nreq.end();"
  },
  {
    "title": "node: export multiple modules",
    "doc": "To access, \n\n```\nvar hello = require('./hello')\nrouter.post('/', hello.a)\n\n```",
    "code": "function a() {\n  // function\n}\n\nfunction b() {\n // function\n}\n\nmodule.exports = { a: a, b: b};"
  },
  {
    "title": "node: route definition (express)",
    "doc": "in `server.js`\n\n```\nvar hello = require(__dirname + '/app/routes/hello');\napp.use('/api/hello', hello);\n\napp.get('*', function(req, res) {\n  res.sendFile(__dirname + '/public/index.html');\n})\n```",
    "code": "var express = require('express');\nvar router = express.Router();\n\nvar apiFunctions = require('./apiFunctions') // means ./apiFunctions.js\n\nrouter.get('/', apiFunctions.getRoot);\nrouter.post('/', apiFunctions.createFile);"
  },
  {
    "title": "node: ignore self signed SSL",
    "doc": "",
    "code": "process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';"
  },
  {
    "title": "node: simple location change",
    "doc": "Write location header of the response.\nThen, you need to finish response with `end` function.",
    "code": "res.writeHead(303, { Location: 'http://example.com/redirected' });\nres.end();"
  },
  {
    "title": "node: change env",
    "doc": "You can set the environment via: `NODE_ENV`\nex: `$ NODE_ENV=production gulp start_server`",
    "code": "// require like this\nvar config = require('./config/env.json')[process.env.NODE_ENV || 'dev-local'];\n\n// use like this\nvar host = config.host;\n\n// configure like this (env.json) REMEMBER: you have to ignore this file\n{\"dev-local\": {\"host\":\"localhost\"}, \"production\":{\"host\":\"myapp.example.com\"}}"
  },
  {
    "title": "node: base64",
    "doc": "",
    "code": "var buffer = new Buffer(content);\nvar encodedContent = buffer.toString('base64');"
  }
]